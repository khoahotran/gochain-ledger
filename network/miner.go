package network

import (
	"bytes"
	"context"
	"encoding/gob"
	"log"
	"time"

	"github.com/go-redis/redis/v8"
	"github.com/khoahotran/gochain-ledger/domain"
)

const (
	miningInterval = 10 * time.Second // ƒê√†o 10 gi√¢y m·ªôt l·∫ßn
	rewardAmount   = 100              // Th∆∞·ªüng ƒë√†o block
)

// StartMiningLoop l√† v√≤ng l·∫∑p ch·∫°y n·ªÅn c·ªßa th·ª£ ƒë√†o
func StartMiningLoop(bc *domain.Blockchain, rdb *redis.Client, minerAddress string) {
	ctx := context.Background()

	// T·∫°o m·ªôt "ƒë·ªìng h·ªì" ƒë·∫øm 10 gi√¢y
	ticker := time.NewTicker(miningInterval)
	defer ticker.Stop()

	// V√≤ng l·∫∑p v√¥ t·∫≠n, ch·∫°y m·ªói khi ƒë·ªìng h·ªì k√™u
	for range ticker.C {
		log.Println("Miner: ƒêang ki·ªÉm tra Mempool...")

		// 1. L·∫•y t·∫•t c·∫£ giao d·ªãch t·ª´ Mempool (Redis)
		txsData, err := rdb.SMembers(ctx, mempoolKey).Result()
		if err != nil {
			log.Printf("Miner: L·ªói khi ƒë·ªçc mempool: %v", err)
			continue
		}

		if len(txsData) == 0 {
			log.Println("Miner: Mempool tr·ªëng. ƒêang ch·ªù...")
			continue // Kh√¥ng c√≥ g√¨ ƒë·ªÉ ƒë√†o, ch·ªù 10 gi√¢y ti·∫øp
		}

		log.Printf("Miner: T√¨m th·∫•y %d giao d·ªãch! B·∫Øt ƒë·∫ßu ƒë√†o...", len(txsData))

		var validTxs []*domain.Transaction
		var processedTxsData [][]byte // D√πng ƒë·ªÉ x√≥a kh·ªèi Redis sau

		// 2. X√°c th·ª±c c√°c giao d·ªãch
		// (R·∫•t quan tr·ªçng! Kh√¥ng tin t∆∞·ªüng giao d·ªãch t·ª´ m·∫°ng)
		for _, data := range txsData {
			var tx domain.Transaction
			dec := gob.NewDecoder(bytes.NewReader([]byte(data)))
			if err := dec.Decode(&tx); err != nil {
				log.Printf("Miner: L·ªói gi·∫£i m√£ TX: %v. B·ªè qua.", err)
				continue
			}

			processedTxsData = append(processedTxsData, []byte(data))

			// L·∫•y c√°c TX c≈© m√† TX n√†y tham chi·∫øu
			prevTxs := bc.FindReferencedTxs(&tx)

			// X√°c th·ª±c ch·ªØ k√Ω
			if tx.Verify(prevTxs) {
				log.Printf("Miner: TX h·ª£p l·ªá: %x", tx.ID)
				validTxs = append(validTxs, &tx)
			} else {
				log.Printf("Miner: Ph√°t hi·ªán TX kh√¥ng h·ª£p l·ªá: %x. ƒêang x√≥a...", tx.ID)
				// Kh√¥ng c·∫ßn l√†m g√¨ th√™m, n√≥ s·∫Ω b·ªã x√≥a ·ªü b∆∞·ªõc 5
			}
		}

		// 3. T·∫°o giao d·ªãch th∆∞·ªüng (Coinbase)
		coinbaseTx := domain.NewCoinbaseTransaction(minerAddress, rewardAmount)
		allTxs := append([]*domain.Transaction{coinbaseTx}, validTxs...)

		// 4. ƒê√†o block (H√†m n√†y ƒë√£ bao g·ªìm PoW v√† c·∫≠p nh·∫≠t UTXO Set)
		bc.AddBlock(allTxs)

		log.Printf("Miner: === üöÄ ƒê√ÄO TH√ÄNH C√îNG BLOCK M·ªöI! ===")

		// 5. D·ªçn d·∫πp Mempool (X√≥a c√°c TX ƒë√£ x·ª≠ l√Ω)
		if len(processedTxsData) > 0 {
			pipe := rdb.Pipeline()
			for _, data := range processedTxsData {
				pipe.SRem(ctx, mempoolKey, data)
			}
			_, err = pipe.Exec(ctx)
			if err != nil {
				log.Printf("Miner: L·ªói d·ªçn d·∫πp mempool: %v", err)
			}
			log.Printf("Miner: ƒê√£ d·ªçn d·∫πp %d TX kh·ªèi Mempool.", len(processedTxsData))
		}
	}
}
