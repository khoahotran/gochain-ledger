// Sử dụng cú pháp proto3

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto/blockchain.proto

// Tên package của Protobuf

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NodeService_SendTransaction_FullMethodName    = "/proto.NodeService/SendTransaction"
	NodeService_AnnounceBlock_FullMethodName      = "/proto.NodeService/AnnounceBlock"
	NodeService_GetBlocks_FullMethodName          = "/proto.NodeService/GetBlocks"
	NodeService_GetKnownNodes_FullMethodName      = "/proto.NodeService/GetKnownNodes"
	NodeService_GetBalance_FullMethodName         = "/proto.NodeService/GetBalance"
	NodeService_FindSpendableUTXOs_FullMethodName = "/proto.NodeService/FindSpendableUTXOs"
)

// NodeServiceClient is the client API for NodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Định nghĩa Dịch vụ Node (API)
// Đây là các hàm mà một node có thể gọi trên node khác
type NodeServiceClient interface {
	// Gửi một giao dịch mới đến mempool của node
	SendTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Ack, error)
	// Thông báo một block mới đã được đào
	AnnounceBlock(ctx context.Context, in *Block, opts ...grpc.CallOption) (*Ack, error)
	// Yêu cầu đồng bộ: "Gửi cho tôi các block kể từ block_hash này"
	// Dùng 'stream' để máy chủ có thể gửi nhiều block liên tục
	GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Block], error)
	// Yêu cầu danh sách các node (peers) mà node này biết
	GetKnownNodes(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*KnownNodesResponse, error)
	// Yêu cầu lấy số dư của một địa chỉ
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	// Tìm các UTXO có thể tiêu cho một địa chỉ
	FindSpendableUTXOs(ctx context.Context, in *FindSpendableUTXOsRequest, opts ...grpc.CallOption) (*FindSpendableUTXOsResponse, error)
}

type nodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeServiceClient(cc grpc.ClientConnInterface) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) SendTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, NodeService_SendTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) AnnounceBlock(ctx context.Context, in *Block, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, NodeService_AnnounceBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Block], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NodeService_ServiceDesc.Streams[0], NodeService_GetBlocks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetBlocksRequest, Block]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NodeService_GetBlocksClient = grpc.ServerStreamingClient[Block]

func (c *nodeServiceClient) GetKnownNodes(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*KnownNodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KnownNodesResponse)
	err := c.cc.Invoke(ctx, NodeService_GetKnownNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, NodeService_GetBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) FindSpendableUTXOs(ctx context.Context, in *FindSpendableUTXOsRequest, opts ...grpc.CallOption) (*FindSpendableUTXOsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindSpendableUTXOsResponse)
	err := c.cc.Invoke(ctx, NodeService_FindSpendableUTXOs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServiceServer is the server API for NodeService service.
// All implementations must embed UnimplementedNodeServiceServer
// for forward compatibility.
//
// Định nghĩa Dịch vụ Node (API)
// Đây là các hàm mà một node có thể gọi trên node khác
type NodeServiceServer interface {
	// Gửi một giao dịch mới đến mempool của node
	SendTransaction(context.Context, *Transaction) (*Ack, error)
	// Thông báo một block mới đã được đào
	AnnounceBlock(context.Context, *Block) (*Ack, error)
	// Yêu cầu đồng bộ: "Gửi cho tôi các block kể từ block_hash này"
	// Dùng 'stream' để máy chủ có thể gửi nhiều block liên tục
	GetBlocks(*GetBlocksRequest, grpc.ServerStreamingServer[Block]) error
	// Yêu cầu danh sách các node (peers) mà node này biết
	GetKnownNodes(context.Context, *EmptyRequest) (*KnownNodesResponse, error)
	// Yêu cầu lấy số dư của một địa chỉ
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	// Tìm các UTXO có thể tiêu cho một địa chỉ
	FindSpendableUTXOs(context.Context, *FindSpendableUTXOsRequest) (*FindSpendableUTXOsResponse, error)
	mustEmbedUnimplementedNodeServiceServer()
}

// UnimplementedNodeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNodeServiceServer struct{}

func (UnimplementedNodeServiceServer) SendTransaction(context.Context, *Transaction) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (UnimplementedNodeServiceServer) AnnounceBlock(context.Context, *Block) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnnounceBlock not implemented")
}
func (UnimplementedNodeServiceServer) GetBlocks(*GetBlocksRequest, grpc.ServerStreamingServer[Block]) error {
	return status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (UnimplementedNodeServiceServer) GetKnownNodes(context.Context, *EmptyRequest) (*KnownNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKnownNodes not implemented")
}
func (UnimplementedNodeServiceServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedNodeServiceServer) FindSpendableUTXOs(context.Context, *FindSpendableUTXOsRequest) (*FindSpendableUTXOsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSpendableUTXOs not implemented")
}
func (UnimplementedNodeServiceServer) mustEmbedUnimplementedNodeServiceServer() {}
func (UnimplementedNodeServiceServer) testEmbeddedByValue()                     {}

// UnsafeNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServiceServer will
// result in compilation errors.
type UnsafeNodeServiceServer interface {
	mustEmbedUnimplementedNodeServiceServer()
}

func RegisterNodeServiceServer(s grpc.ServiceRegistrar, srv NodeServiceServer) {
	// If the following call pancis, it indicates UnimplementedNodeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NodeService_ServiceDesc, srv)
}

func _NodeService_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_SendTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).SendTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_AnnounceBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Block)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).AnnounceBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_AnnounceBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).AnnounceBlock(ctx, req.(*Block))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_GetBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBlocksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServiceServer).GetBlocks(m, &grpc.GenericServerStream[GetBlocksRequest, Block]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NodeService_GetBlocksServer = grpc.ServerStreamingServer[Block]

func _NodeService_GetKnownNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).GetKnownNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_GetKnownNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).GetKnownNodes(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_FindSpendableUTXOs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSpendableUTXOsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).FindSpendableUTXOs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_FindSpendableUTXOs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).FindSpendableUTXOs(ctx, req.(*FindSpendableUTXOsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeService_ServiceDesc is the grpc.ServiceDesc for NodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTransaction",
			Handler:    _NodeService_SendTransaction_Handler,
		},
		{
			MethodName: "AnnounceBlock",
			Handler:    _NodeService_AnnounceBlock_Handler,
		},
		{
			MethodName: "GetKnownNodes",
			Handler:    _NodeService_GetKnownNodes_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _NodeService_GetBalance_Handler,
		},
		{
			MethodName: "FindSpendableUTXOs",
			Handler:    _NodeService_FindSpendableUTXOs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBlocks",
			Handler:       _NodeService_GetBlocks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/blockchain.proto",
}
