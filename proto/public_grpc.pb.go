// Sử dụng cú pháp proto3

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto/public.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PublicService_GetBalance_FullMethodName         = "/proto.PublicService/GetBalance"
	PublicService_GetContractState_FullMethodName   = "/proto.PublicService/GetContractState"
	PublicService_SubmitTransaction_FullMethodName  = "/proto.PublicService/SubmitTransaction"
	PublicService_FindSpendableUTXOs_FullMethodName = "/proto.PublicService/FindSpendableUTXOs"
)

// PublicServiceClient is the client API for PublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Định nghĩa Dịch vụ Công khai (cho DApp)
type PublicServiceClient interface {
	// Lấy số dư (giống hệt API cũ)
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	// Đọc state của contract (giống API cũ)
	GetContractState(ctx context.Context, in *GetContractStateRequest, opts ...grpc.CallOption) (*GetContractStateResponse, error)
	// Gửi một giao dịch đã ký (bất kể là Transfer, Deploy hay Call)
	SubmitTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Ack, error)
	// Tìm UTXO có thể tiêu (frontend cần gọi cái này trước khi gửi)
	FindSpendableUTXOs(ctx context.Context, in *FindSpendableUTXOsRequest, opts ...grpc.CallOption) (*FindSpendableUTXOsResponse, error)
}

type publicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicServiceClient(cc grpc.ClientConnInterface) PublicServiceClient {
	return &publicServiceClient{cc}
}

func (c *publicServiceClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, PublicService_GetBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetContractState(ctx context.Context, in *GetContractStateRequest, opts ...grpc.CallOption) (*GetContractStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContractStateResponse)
	err := c.cc.Invoke(ctx, PublicService_GetContractState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) SubmitTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, PublicService_SubmitTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) FindSpendableUTXOs(ctx context.Context, in *FindSpendableUTXOsRequest, opts ...grpc.CallOption) (*FindSpendableUTXOsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindSpendableUTXOsResponse)
	err := c.cc.Invoke(ctx, PublicService_FindSpendableUTXOs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicServiceServer is the server API for PublicService service.
// All implementations must embed UnimplementedPublicServiceServer
// for forward compatibility.
//
// Định nghĩa Dịch vụ Công khai (cho DApp)
type PublicServiceServer interface {
	// Lấy số dư (giống hệt API cũ)
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	// Đọc state của contract (giống API cũ)
	GetContractState(context.Context, *GetContractStateRequest) (*GetContractStateResponse, error)
	// Gửi một giao dịch đã ký (bất kể là Transfer, Deploy hay Call)
	SubmitTransaction(context.Context, *Transaction) (*Ack, error)
	// Tìm UTXO có thể tiêu (frontend cần gọi cái này trước khi gửi)
	FindSpendableUTXOs(context.Context, *FindSpendableUTXOsRequest) (*FindSpendableUTXOsResponse, error)
	mustEmbedUnimplementedPublicServiceServer()
}

// UnimplementedPublicServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPublicServiceServer struct{}

func (UnimplementedPublicServiceServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedPublicServiceServer) GetContractState(context.Context, *GetContractStateRequest) (*GetContractStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractState not implemented")
}
func (UnimplementedPublicServiceServer) SubmitTransaction(context.Context, *Transaction) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTransaction not implemented")
}
func (UnimplementedPublicServiceServer) FindSpendableUTXOs(context.Context, *FindSpendableUTXOsRequest) (*FindSpendableUTXOsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSpendableUTXOs not implemented")
}
func (UnimplementedPublicServiceServer) mustEmbedUnimplementedPublicServiceServer() {}
func (UnimplementedPublicServiceServer) testEmbeddedByValue()                       {}

// UnsafePublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicServiceServer will
// result in compilation errors.
type UnsafePublicServiceServer interface {
	mustEmbedUnimplementedPublicServiceServer()
}

func RegisterPublicServiceServer(s grpc.ServiceRegistrar, srv PublicServiceServer) {
	// If the following call pancis, it indicates UnimplementedPublicServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PublicService_ServiceDesc, srv)
}

func _PublicService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetContractState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetContractState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_GetContractState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetContractState(ctx, req.(*GetContractStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_SubmitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).SubmitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_SubmitTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).SubmitTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_FindSpendableUTXOs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSpendableUTXOsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).FindSpendableUTXOs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_FindSpendableUTXOs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).FindSpendableUTXOs(ctx, req.(*FindSpendableUTXOsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PublicService_ServiceDesc is the grpc.ServiceDesc for PublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PublicService",
	HandlerType: (*PublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBalance",
			Handler:    _PublicService_GetBalance_Handler,
		},
		{
			MethodName: "GetContractState",
			Handler:    _PublicService_GetContractState_Handler,
		},
		{
			MethodName: "SubmitTransaction",
			Handler:    _PublicService_SubmitTransaction_Handler,
		},
		{
			MethodName: "FindSpendableUTXOs",
			Handler:    _PublicService_FindSpendableUTXOs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/public.proto",
}
